{"version":3,"sources":["utils/config.js","context/Context.js","pages/AddContact.js","context/action.types.js","components/Contact.js","pages/Contacts.js","layout/Header.js","layout/Footer.js","pages/ViewContact.js","pages/PageNotFound.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["imageConfig","quality","maxWidth","maxHeight","autoRotate","ContactContext","createContext","AddContact","useContext","state","dispatch","contactToUpdate","contactToUpdateKey","history","useHistory","useState","name","setName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","useEffect","picture","imagePicker","e","a","file","target","files","metadata","contentType","type","readAndCompressImage","resizedImage","firebase","storage","ref","storageRef","uploadTask","child","put","on","TaskEvent","STATE_CHANGED","snapshot","progress","bytesTransferred","totalBytes","TaskState","PAUSED","console","log","RUNNING","toast","error","getDownloadURL","then","downloadURL","catch","err","addContact","database","v4","set","updateContact","Container","fluid","className","Row","Col","md","Form","onSubmit","preventDefault","payload","key","push","Spinner","color","htmlFor","src","alt","id","accept","multiple","onChange","FormGroup","Input","placeholder","value","check","Label","checked","Button","block","Contact","contact","contactKey","onClick","update","viewSingleContact","remove","Contacts","contacts","isLoading","length","ListGroup","Object","entries","map","ListGroupItem","Header","Navbar","light","NavbarBrand","tag","Link","to","NavbarText","Footer","ViewContact","Card","CardBody","height","width","CardTitle","CardSubtitle","href","PageNotFound","action","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initialState","App","useReducer","reducer","getContacts","val","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.53c7279f.chunk.js","sourcesContent":["//TODO: add firebase configuration and export it\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyBA8C7-fAWUeGfFc0YXEWT6AV9qsrFKggU\",\n  authDomain: \"mygitapp-46ecc.firebaseapp.com\",\n  databaseURL: \"https://mygitapp-46ecc.firebaseio.com\",\n  projectId: \"mygitapp-46ecc\",\n  storageBucket: \"mygitapp-46ecc.appspot.com\",\n  messagingSenderId: \"479423048924\",\n  appId: \"1:479423048924:web:b08273f9dafd483d289819\",\n  measurementId: \"G-0SSV6MWM08\"\n};\n\n//image configuration\nexport const imageConfig = {\n  quality: 0.2,\n  maxWidth: 800,\n  maxHeight: 600,\n  autoRotate: true\n};\n","//TODO: Create context: ContactContext\n\nimport {createContext} from \"react\"\nexport const ContactContext = createContext()","// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Spinner,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: add image configurations\nimport {imageConfig} from \"../utils/config\"\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async e => {\n    // TODO: upload image and set D-URL to state\n\n    try {\n      const file = e.target.files[0]\n\n      var metadata = {\n        contentType: file.type\n      }\n\n      let resizedImage = await readAndCompressImage(file , imageConfig)\n\n      const storageRef = await firebase.storage().ref()\n      var uploadTask = storageRef\n          .child(\"image/\" + file.name)\n          .put(resizedImage , metadata)\n\n      uploadTask.on(\n        firebase.storage.TaskEvent.STATE_CHANGED,\n        snapshot => {\n          setIsUploading(true)\n          var progress =(snapshot.bytesTransferred/snapshot.totalBytes)*100\n\n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED:\n              setIsUploading(false)\n              console.log(\"Uploading is pushed\");\n              break;\n\n            case firebase.storage.TaskState.RUNNING:\n              console.log(\"Uploading is progress..\");\n              break;\n            \n          }\n\n          if(progress === 100){\n            setIsUploading(false)\n            toast(\"uploaded\" ,{type:\"success\"})\n          }\n\n        },\n\n        error =>{\n          toast(\"something is wrong in state change\" , {type:\"error\"})\n        },\n        () =>{\n          uploadTask.snapshot.ref\n          .getDownloadURL()\n          .then(downloadURL => {\n            setDownloadUrl(downloadURL)\n          })\n          .catch(err => console.log(err))\n        }\n\n      );\n      \n\n    } catch (error) {\n      console.log(error)\n      toast(\"somthing went wrong..\" , {type:\"error\"})\n    }\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    //TODO: add contact method\n    try {\n      firebase\n      .database()\n      .ref('contacts/' + v4())\n      .set({\n        name,\n        email,\n        phoneNumber,\n        address,\n        picture: downloadUrl,\n        star \n      })\n    } catch (error) {\n      console.log(error)      \n    }\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    //TODO: update contact method\n\n    try {\n      firebase\n      .database()\n      .ref('contacts/' + contactToUpdateKey)\n      .set({\n        name,\n        email,\n        phoneNumber,\n        address,\n        picture: downloadUrl,\n        star\n      })\n      \n    } catch (error) {\n      console.log(error)\n      toast(\"oops..\" , {type:\"error\"})\n\n    }\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    isUpdate ? updateContact() : addContact()\n\n    toast(\"sucess\" ,{type:\"success\"})\n\n    // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    });\n\n    // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n    history.push(\"/\");\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5\">\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\n          <Form onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              {isUploading ? (\n                <Spinner type=\"grow\" color=\"primary\" />\n              ) : (\n                <div>\n                  <label htmlFor=\"imagepicker\" className=\"\">\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    name=\"image\"\n                    id=\"imagepicker\"\n                    accept=\"image/*\"\n                    multiple={false}\n                    onChange={e => imagePicker(e)}\n                    className=\"hidden\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"number\"\n                id=\"phonenumber\"\n                value={phoneNumber}\n                onChange={e => setPhoneNumber(e.target.value)}\n                placeholder=\"phone number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"area\"\n                id=\"area\"\n                value={address}\n                onChange={e => setAddress(e.target.value)}\n                placeholder=\"address\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    setStar(!star);\n                  }}\n                  checked={star}\n                />{\" \"}\n                <span className=\"text-right\">Mark as Star</span>\n              </Label>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              block\n              className=\"text-uppercase\"\n            >\n              {isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n","//TODO: SET_LOADING, SET_CONTACT,\n// CONTACT_TO_UPDATE, SET_SINGLE_CONTACT\n\nexport const SET_LOADING = \"SET_LOADING\"\nexport const SET_CONTACT = \"SET_CONTACT\"\nexport const CONTACT_TO_UPDATE = \"CONTACT_TO_UPDATE\"\nexport const SET_SINGLE_CONTACT = \"SET_SINGLE_CONTACT\"","// https://firebase.google.com/docs/database/web/read-and-write?authuser=1#read_data_once\n\nimport React, { useContext } from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\n// icons\nimport { FaRegStar, FaStar } from \"react-icons/fa\";\nimport { MdDelete, MdEdit } from \"react-icons/md\";\n\n//TODO: add firebase\nimport firebase from \"firebase/app\"\n\n// context stuffs\n//TODO: import context and action: update and single_contact\nimport {ContactContext} from \"../context/Context\"\nimport {CONTACT_TO_UPDATE , SET_SINGLE_CONTACT} from \"../context/action.types\"\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst Contact = ({ contact, contactKey }) => {\n  //TODO: destructuring dispatch from the context\n  const {dispatch} = useContext(ContactContext);\n\n  // history hooks to get history\n  const history = useHistory();\n\n  // to delete the contact when delete contact is clicked\n  const deleteContact = () => {\n    //TODO: create this method from firebase\n    firebase\n    .database()\n    .ref(`/contacts/${contactKey}`)\n    .remove()\n    .then( () =>{\n      toast(\"Deleted Sucessfully\" , {type:\"warning\"})\n    })\n    .catch(err => console.log(err))\n  };\n\n  // update the star/important contact ,ie, star it or unstar the single contact\n  const updateImpContact = () => {\n    //TODO: update (star) contact, use contactKey\n    firebase\n    .database()\n    .ref(`/contacts/${contactKey}`)\n    .update(\n      {\n        star: !contact.star\n      },\n      err => {\n        console.log(err)\n      }\n    )\n    .then( () => {\n      toast(\" Contact Updated\" , {type: \"info\"})\n    })\n    .catch(err => console.log(err))\n\n  };\n\n  // when the update icon/ pen ion is clicked\n  const updateContact = () => {\n    // dispatching one action to update contact\n    //TODO: use dispatch to update\n\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: contact,\n      key: contactKey\n    });\n\n    // and pushing to the add contact screen\n    history.push(\"/contact/add\");\n  };\n\n  // to view a single contact in the contact/view screen\n  const viewSingleContact = contact => {\n    // setting single contact in state\n    //TODO: use dispatch to view single contact\n    dispatch({\n      type: SET_SINGLE_CONTACT,\n      payload: contact\n    })\n\n    // sending...\n    history.push(\"/contact/view\");\n  };\n\n  return (\n    <>\n      <Row>\n        <Col\n          md=\"1\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <div className=\"icon\" onClick={() => updateImpContact()}>\n            {contact.star ? (\n              <FaStar className=\" text-primary\" />\n            ) : (\n              <FaRegStar className=\" text-info\" />\n            )}\n          </div>\n        </Col>\n        <Col\n          md=\"2\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <img src={contact.picture} alt=\"\" className=\"img-circle profile\" />\n        </Col>\n        <Col md=\"8\" onClick={() => viewSingleContact(contact)}>\n          <div className=\"text-primary\">{contact.name}</div>\n\n          <div className=\"text-secondary\">{contact.phoneNumber}</div>\n          <div className=\"text-secondary\">\n            {/* {FIXME: display contact email}  */}\n            {contact.email}\n          </div>\n\n          <div className=\"text-info\">{contact.address}</div>\n        </Col>\n        <Col\n          md=\"1\"\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          <MdDelete\n            onClick={() => deleteContact()}\n            color=\"danger\"\n            className=\"text-danger icon\"\n          />\n          <MdEdit\n            className=\"icon text-info ml-2\"\n            onClick={() => updateContact()}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Contact;\n","import React, { useContext } from \"react\";\n\nimport { Container, ListGroup, ListGroupItem, Spinner } from \"reactstrap\";\nimport Contact from \"../components/Contact\";\nimport { MdAdd } from \"react-icons/md\";\nimport { useHistory } from \"react-router-dom\";\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nconst Contacts = () => {\n  const { state, dispatch } = useContext(ContactContext);\n\n  // destructuring contacts and isLoading from state\n  const { contacts, isLoading } = state;\n\n  // history hooks from react router dom to get history\n  const history = useHistory();\n\n  // handle fab icon button click\n  // will set in state of the contact to update and send it to the contact/add route\n  const AddContact = () => {\n    //TODO: use dispatch to send user to add contact screen\n    dispatch({\n      type:CONTACT_TO_UPDATE,\n      payload:null,\n      key: null\n    })\n\n    history.push(\"/contact/add\");\n  };\n\n  // return loading spinner\n  if (isLoading) {\n    return (\n      <div className=\"Center\">\n        <Spinner color=\"primary\" />\n        <div className=\"text-primary\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Container className=\"mt-4\">\n      {/* TODO: Loop through FIREBASE objects  */}\n      {contacts.length === 0 && !isLoading ? (\n        <div className= \"Center text-large text-primary\">No Contact found In Fiebase</div>\n      ) : (\n        <ListGroup>\n          {Object.entries(contacts).map(([key , value]) => (\n            <ListGroupItem key = {key}>\n              <Contact contact={value} contactKey={key}/>\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      )}\n      <MdAdd className=\"fab icon \" onClick={AddContact} />\n    </Container>\n  );\n};\n\nexport default Contacts;\n","//TODO: set NavbarBrand to go to home page and export Header\n\nimport React from \"react\";\nimport { Navbar, NavbarBrand, NavbarText } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => {\n  return (\n    <Navbar color=\"dark\" light>\n      <NavbarBrand tag={Link}  to=\"/\" className=\"text-white\">\n        Contact App\n      </NavbarBrand>\n      \n      <NavbarText className=\"text-white float-right\">\n        A simple Contact app\n          {/* <Link to=\"/\">HOME</Link> */}\n      </NavbarText>\n    </Navbar>\n  );\n};\n\nexport default Header\n","//TODO: Export the Footer\nimport React from \"react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"bg-dark text-center text-white pt-3 pb-2 mt-5 sticky-bottom\">\n     @khus.meher\n    </footer>\n  );\n};\n\n\nexport default Footer","import React, { useContext } from \"react\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  CardSubtitle\n} from \"reactstrap\";\nimport { FaEnvelope, FaMapMarkerAlt, FaPhone } from \"react-icons/fa\";\nimport { ContactContext } from \"../context/Context\";\n\nconst ViewContact = () => {\n  const { state } = useContext(ContactContext);\n  // destructuring contact from the state\n  // and rendering it in state\n  //FIXME: destructure contact from state\n  const {contact} = state;\n  return (\n    <Container>\n      <Row className=\"mt-5 mb-5\">\n        <Col md=\"5\" className=\"offset-md-3\">\n          <Card className=\"pt-3 pb-5\">\n            <CardBody className=\"text-center \">\n              <img\n                height=\"150\"\n                width=\"150\"\n                className=\"cardImg profile border-danger\"\n                src={contact?.picture}\n              />\n              <CardTitle className=\"text-primary mt-3\">\n                <h1>{contact?.name}</h1>\n              </CardTitle>\n              <CardSubtitle>\n                <h3>\n                  <FaPhone className=\"mr-2\" />\n                  {contact?.phoneNumber}\n                </h3>\n              </CardSubtitle>\n              <a\n                className=\"btn btn-primary btn-block\"\n                target=\"_blank\"\n                href={`mailto:{contact?.email}`}\n              >\n                <FaEnvelope className=\"icon mr-2\" />\n                {contact?.email}\n              </a>\n\n              <a\n                className=\"btn btn-primary btn-block\"\n                target=\"blank\"\n                //TODO: add google maps\n                href = {`https://maps.google.com/? = ${contact?.address}`}\n              >\n                <FaMapMarkerAlt className=\"icon mr-2\" />\n                {contact?.address}\n              </a>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ViewContact;\n","import React from \"react\";\n\nconst PageNotFound = () => {\n  return (\n    <div>\n      <h1>404 page not found</h1>\n    </div>\n  );\n};\n\n//FIXME: missing keywords\nexport default  PageNotFound;\n","//TODO: create contact using all actions\n\nimport {\n  SET_CONTACT,\n  SET_LOADING,\n  CONTACT_TO_UPDATE,\n  SET_SINGLE_CONTACT\n} from \"./action.types\";\n\n//TODO: use switch case\nexport default (state , action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n     return action.payload == null \n      ?{...state , contact: []}\n      : {...state, contacts:action.payload} \n    \n      case SET_LOADING:\n        return{...state , isLoading: action.payload};\n\n      case CONTACT_TO_UPDATE:\n        return{\n          ...state,\n          contactToUpdate: action.payload,\n          contactToUpdateKey: action.key\n        }\n        \n      case SET_SINGLE_CONTACT:\n        return{\n          ...state ,\n          contact: action.payload\n        };\n\n    default:\n      return state\n  }\n}","import React, { useReducer, useEffect } from \"react\";\n\nimport { Container, Col, Row } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// firebase stuffs\n//TODO: import firebase config and firebase database\nimport {firebaseConfig} from \"./utils/config\"\nimport firebase from \"firebase/app\"\nimport \"firebase/database\"\nimport \"firebase/storage\"\n\n// components\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\n// context api stuffs\n//TODO: import reducers and contexts\nimport reducer from \"./context/reducer\"\nimport {ContactContext} from \"./context/Context\"\nimport {SET_CONTACT, SET_LOADING} from \"./context/action.types\"\n\n//initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n//TODO: initialize FIREBASE\nfirebase.initializeApp(firebaseConfig)\n\n\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from firebase and set it on state contacts array\n  const getContacts = async () => {\n    // TODO: load existing data\n    dispatch({\n      type: SET_LOADING,\n      payload:true\n    })\n\n    const contactRef = await firebase.database().ref(\"/contacts\")\n    contactRef.on('value' , snapshot => {\n      dispatch({\n        type:SET_CONTACT,\n        payload: snapshot.val()\n      });\n\n      dispatch({\n        type:SET_LOADING,\n        payload:false\n      });\n    });\n\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    //FIXME: call methods if needed\n    getContacts()\n  }, []);\n\n  return (\n    <Router>\n      {/* FIXME: Provider is not configured */}\n      <ContactContext.Provider value ={{state , dispatch}}>\n        <ToastContainer />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n\n        <Footer />\n      </ContactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}